// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`expressions should parse arrays 1`] = `
"(async function () {
    try {
        let $_x = [
            1,
            2,
            3,
            4
        ];
        for (let $_word of [
                \`lorem\`,
                \`ipsum\`,
                \`dolor\`
            ]) {
            if (gaiman.should_break_loop(1)) {
                break;
            }
            gaiman.echo($_word);
        }
        gaiman.exit_loop(1);
        for (let $_i of [
                1,
                2,
                3
            ]) {
            if (gaiman.should_break_loop(2)) {
                break;
            }
            gaiman.echo($_i);
        }
        gaiman.exit_loop(2);
        let $_names = [
            \`helo\`,
            \`world\`
        ];
        gaiman.echo($_names[0] + \` \` + $_names[1]);
    } catch (e) {
        gaiman.error(e);
    }
}());"
`;

exports[`expressions should parse dictionaries 1`] = `
"(async function () {
    try {
        let $_dict = {};
        let $_dict = {
            [\`foo\`]: 10,
            [\`bar\`]: \`hello\`,
            [\`baz\`]: [
                1,
                2,
                3
            ],
            [\`quux\`]: {
                [\`1\`]: 10,
                [\`2\`]: 20,
                [\`3\`]: 30
            }
        };
    } catch (e) {
        gaiman.error(e);
    }
}());"
`;

exports[`expressions should parse property access 1`] = `
"(async function () {
    try {
        gaiman.echo($_dict[$_i]);
        gaiman.echo(await gaiman.get($_dict[\`hello\`]));
        gaiman.echo(await gaiman.get($_dict[\`hello_\` + 10]));
        $_dict[$_i] = 10;
        $_dict[$_i] = { [\`foo\`]: 10 };
        $_dict[$_i][\`hello\`][\`world\`][$_nice];
    } catch (e) {
        gaiman.error(e);
    }
}());"
`;

exports[`expressions should parse property access 2`] = `
"(async function () {
    try {
        $_dict[$_i] = 10;
        $_dict[$_i] = { [\`foo\`]: 10 };
        $_dict[10 + 10] = \`hello \${ $_bar }\`;
    } catch (e) {
        gaiman.error(e);
    }
}());"
`;

exports[`expressions should use command as part of expression 1`] = `
"(async function () {
    try {
        await gaiman.echo_2(await gaiman.get(\`https://jcubic.pl/file.txt\`), 100);
        gaiman.echo(\`<white>\` + await gaiman.ask(\`? \`) + \`</white>\`);
    } catch (e) {
        gaiman.error(e);
    }
}());"
`;

exports[`functions should compile function calls 1`] = `
"(async function () {
    try {
        async function $_global($_message) {
            gaiman.echo($_message);
            if ($$__m = String($_message).match(/hello/)) {
                await $_show_hello();
            }
        }
        async function $_show_hello() {
            gaiman.echo(\`hello\`);
        }
        await $_global(\`hello\`);
    } catch (e) {
        gaiman.error(e);
    }
}());"
`;

exports[`functions should compile function definitions 1`] = `
"(async function () {
    try {
        async function $_foo($_arg) {
            if ($$__m = String($_arg).match(/foo/)) {
                return 10 + 10;
            }
        }
        async function $_login($_username) {
            gaiman.echo(\`what's up?\`);
            if ($$__m = String($_username).match(/root/)) {
                return await gaiman.ask($_username + \`# \`);
            } else {
                return await gaiman.ask($_username + \`$ \`);
            }
        }
    } catch (e) {
        gaiman.error(e);
    }
}());"
`;

exports[`functions should create factorial function 1`] = `
"(async function () {
    try {
        async function $_factorial($_n) {
            if ($_n <= 0) {
                return 1;
            } else {
                return $_n * await $_factorial($_n - 1);
            }
        }
    } catch (e) {
        gaiman.error(e);
    }
}());"
`;

exports[`global should ignore comments 1`] = `
"(async function () {
    try {
        let $_x = {
            [\`foo\`]: 10,
            [\`bar\`]: 20
        };
        let $_y = [
            1,
            2,
            3,
            4
        ];
        async function $_foo() {
            return 10;
        }
        while (!true) {
            if (gaiman.should_break_loop(1)) {
                break;
            }
            $_x;
        }
        gaiman.exit_loop(1);
        for (let $_i of [
                1,
                2,
                3
            ]) {
            if (gaiman.should_break_loop(2)) {
                break;
            }
            $_x;
        }
        gaiman.exit_loop(2);
    } catch (e) {
        gaiman.error(e);
    }
}());"
`;

exports[`if statements should compile base if 1`] = `
"(async function () {
    try {
        if ($$__m = String($$__m[1]).match(/foo/)) {
            let $_command = await gaiman.ask(\`? \`);
            if ($$__m = String($_commad).match(/bar/)) {
                gaiman.echo($$__m[1]);
            }
        }
    } catch (e) {
        gaiman.error(e);
    }
}());"
`;

exports[`if statements should compile if_else 1`] = `
"(async function () {
    try {
        if ($$__m = String($$__m[1]).match(/foo/)) {
            let $_command = await gaiman.ask(\`? \`);
            if ($$__m = String($_commad).match(/(bar)/g)) {
                gaiman.echo($$__m[1]);
            } else if ($$__m = String($_command).match(/(baz)/g)) {
                gaiman.echo($$__m[1]);
            } else {
                gaiman.echo(\`NOP\`);
            }
        } else {
            gaiman.echo(\`NOP\`);
        }
    } catch (e) {
        gaiman.error(e);
    }
}());"
`;

exports[`if statements should compile multiple if_else  1`] = `
"(async function () {
    try {
        if ($$__m = String($$__m[1]).match(/foo/)) {
            let $_command = await gaiman.ask(\`? \`);
            if ($$__m = String($_commad).match(/(bar)/g)) {
                gaiman.echo($$__m[1]);
            } else if ($$__m = String($_command).match(/(baz)/g)) {
                gaiman.echo($$__m[1]);
            } else {
                gaiman.echo(\`NOP\`);
            }
        } else {
            gaiman.echo(\`NOP\`);
        }
        let $_command = await gaiman.ask(\`? \`);
        if ($$__m = String($_command).match(/foo/)) {
            gaiman.echo(\`1\`);
        } else if ($$__m = String($_command).match(/bar/)) {
            gaiman.echo(\`2\`);
        } else {
            gaiman.echo(\`3\`);
        }
    } catch (e) {
        gaiman.error(e);
    }
}());"
`;

exports[`if statements should compile multiple if_else with expressions 1`] = `
"(async function () {
    try {
        gaiman.echo(\`hello\` + \` world\`);
        let $_command = await gaiman.ask(\`? \`);
        if ($$__m = String($_command).match(/(foo)/)) {
            let $_command = await gaiman.ask(\`? \`);
            let $_foo = 30 * 30 / 2;
            10 * 10 + 3;
            if ($$__m = String($_commad).match(/(bar)/)) {
                gaiman.echo($$__m[1] + \`foo\`);
                let $_bar = 10 + 10 * 20;
                let $_baz = 30 * 30 / 2;
            } else {
                let $_quux = 30 * 30 / 2 * 3;
                10 * 10 / 2;
            }
        }
    } catch (e) {
        gaiman.error(e);
    }
}());"
`;

exports[`loop should parse break 1`] = `
"(async function () {
    try {
        let $_x = 0;
        while (true) {
            if (gaiman.should_break_loop(1)) {
                break;
            }
            $_x = $_x + 1;
            if ($_x > 10) {
                break;
            }
            gaiman.echo($_x);
        }
        gaiman.exit_loop(1);
    } catch (e) {
        gaiman.error(e);
    }
}());"
`;

exports[`loop should parse continue 1`] = `
"(async function () {
    try {
        for (let $_i of [
                1,
                2,
                3,
                4,
                5,
                6,
                7
            ]) {
            if (gaiman.should_break_loop(1)) {
                break;
            }
            if ($_i % 2 === 0) {
                continue;
            }
            gaiman.echo($_i);
        }
        gaiman.exit_loop(1);
    } catch (e) {
        gaiman.error(e);
    }
}());"
`;

exports[`loop should parse for loops 1`] = `
"(async function () {
    try {
        for (let $_chr of \`hello\`) {
            if (gaiman.should_break_loop(1)) {
                break;
            }
            gaiman.echo($_chr);
        }
        gaiman.exit_loop(1);
        for (let $_chr of location.href) {
            if (gaiman.should_break_loop(2)) {
                break;
            }
            gaiman.echo($_chr);
        }
        gaiman.exit_loop(2);
    } catch (e) {
        gaiman.error(e);
    }
}());"
`;

exports[`loop should parse while loops 1`] = `
"(async function () {
    try {
        let $_x = 10;
        while ($_x > 0) {
            if (gaiman.should_break_loop(1)) {
                break;
            }
            gaiman.echo(\`NUM: \${ $_x }\`);
            $_x = $_x - 1;
        }
        gaiman.exit_loop(1);
        while (!true) {
            if (gaiman.should_break_loop(2)) {
                break;
            }
            $_x;
        }
        gaiman.exit_loop(2);
    } catch (e) {
        gaiman.error(e);
    }
}());"
`;
