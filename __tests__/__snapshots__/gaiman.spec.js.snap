// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`functions should compile functions 1`] = `
"async function foo(arg) {
    if ($__m = String(arg).match(/foo/)) {
        return 10 + 10;
    }
}
async function login(username) {
    term.echo('what\\\\'s up?');
    if ($__m = String(username).match(/root/)) {
        return await term.read(username + '# ');
    } else {
        return await term.read(username + '$ ');
    }
}"
`;

exports[`if statements should compile base if 1`] = `
"if ($__m = String($__m[1]).match(/foo/)) {
    let command = await term.read('? ');
    if ($__m = String(commad).match(/bar/)) {
        term.echo($__m[1]);
    }
}"
`;

exports[`if statements should compile if_else 1`] = `
"if ($__m = String($__m[1]).match(/foo/)) {
    let command = await term.read('? ');
    if ($__m = String(commad).match(/(bar)/g)) {
        term.echo($__m[1]);
    } else if ($__m = String(command).match(/(baz)/g)) {
        term.echo($__m[1]);
    } else {
        term.echo('NOP');
    }
} else {
    term.echo('NOP');
}"
`;

exports[`if statements should compile multiple if_else  1`] = `
"if ($__m = String($__m[1]).match(/foo/)) {
    let command = await term.read('? ');
    if ($__m = String(commad).match(/(bar)/g)) {
        term.echo($__m[1]);
    } else if ($__m = String(command).match(/(baz)/g)) {
        term.echo($__m[1]);
    } else {
        term.echo('NOP');
    }
} else {
    term.echo('NOP');
}
let command = await term.read('? ');
if ($__m = String(command).match(/foo/)) {
    term.echo('1');
} else if ($__m = String(command).match(/bar/)) {
    term.echo('2');
} else {
    term.echo('3');
}"
`;

exports[`if statements should compile multiple if_else with expressions 1`] = `
"term.echo('hello' + ' world');
let command = await term.read('? ');
if ($__m = String(command).match(/(foo)/)) {
    let command = await term.read('? ');
    let foo = 30 * 30 / 2;
    10 * 10 + 3;
    if ($__m = String(commad).match(/(bar)/)) {
        term.echo($__m[1] + 'foo');
        let bar = 10 + 10 * 20;
        let baz = 30 * 30 / 2;
    } else {
        let quux = 30 * 30 / 2 * 3;
        10 * 10 / 2;
    }
}"
`;
