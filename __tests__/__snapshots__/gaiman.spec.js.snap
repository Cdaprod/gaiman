// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`expressions should use command as part of expression 1`] = `
"(async function () {
    try {
        await term.echo_animate(await term.get(\`https://jcubic.pl/file.txt\`), 100);
        term.echo(\`<white>\` + await term.ask(\`? \`) + \`</white>\`);
    } catch (e) {
        term.error(e);
    }
}());"
`;

exports[`for loop should parse for loops 1`] = `
"(async function () {
    try {
        for (let $_chr of \`hello\`) {
            term.echo($_chr);
        }
        for (let $_chr of location.href) {
            term.echo($_chr);
        }
    } catch (e) {
        term.error(e);
    }
}());"
`;

exports[`functions should compile function calls 1`] = `
"(async function () {
    try {
        async function $_global($_message) {
            term.echo($_message);
            if ($$__m = String($_message).match(/hello/)) {
                await $_show_hello();
            }
        }
        async function $_show_hello() {
            term.echo(\`hello\`);
        }
        await $_global(\`hello\`);
    } catch (e) {
        term.error(e);
    }
}());"
`;

exports[`functions should compile function definitions 1`] = `
"(async function () {
    try {
        async function $_foo($_arg) {
            if ($$__m = String($_arg).match(/foo/)) {
                return 10 + 10;
            }
        }
        async function $_login($_username) {
            term.echo(\`what's up?\`);
            if ($$__m = String($_username).match(/root/)) {
                return await term.ask($_username + \`# \`);
            } else {
                return await term.ask($_username + \`$ \`);
            }
        }
    } catch (e) {
        term.error(e);
    }
}());"
`;

exports[`if statements should compile base if 1`] = `
"(async function () {
    try {
        if ($$__m = String($$__m[1]).match(/foo/)) {
            let $_command = await term.ask(\`? \`);
            if ($$__m = String($_commad).match(/bar/)) {
                term.echo($$__m[1]);
            }
        }
    } catch (e) {
        term.error(e);
    }
}());"
`;

exports[`if statements should compile if_else 1`] = `
"(async function () {
    try {
        if ($$__m = String($$__m[1]).match(/foo/)) {
            let $_command = await term.ask(\`? \`);
            if ($$__m = String($_commad).match(/(bar)/g)) {
                term.echo($$__m[1]);
            } else if ($$__m = String($_command).match(/(baz)/g)) {
                term.echo($$__m[1]);
            } else {
                term.echo(\`NOP\`);
            }
        } else {
            term.echo(\`NOP\`);
        }
    } catch (e) {
        term.error(e);
    }
}());"
`;

exports[`if statements should compile multiple if_else  1`] = `
"(async function () {
    try {
        if ($$__m = String($$__m[1]).match(/foo/)) {
            let $_command = await term.ask(\`? \`);
            if ($$__m = String($_commad).match(/(bar)/g)) {
                term.echo($$__m[1]);
            } else if ($$__m = String($_command).match(/(baz)/g)) {
                term.echo($$__m[1]);
            } else {
                term.echo(\`NOP\`);
            }
        } else {
            term.echo(\`NOP\`);
        }
        let $_command = await term.ask(\`? \`);
        if ($$__m = String($_command).match(/foo/)) {
            term.echo(\`1\`);
        } else if ($$__m = String($_command).match(/bar/)) {
            term.echo(\`2\`);
        } else {
            term.echo(\`3\`);
        }
    } catch (e) {
        term.error(e);
    }
}());"
`;

exports[`if statements should compile multiple if_else with expressions 1`] = `
"(async function () {
    try {
        term.echo(\`hello\` + \` world\`);
        let $_command = await term.ask(\`? \`);
        if ($$__m = String($_command).match(/(foo)/)) {
            let $_command = await term.ask(\`? \`);
            let $_foo = 30 * 30 / 2;
            10 * 10 + 3;
            if ($$__m = String($_commad).match(/(bar)/)) {
                term.echo($$__m[1] + \`foo\`);
                let $_bar = 10 + 10 * 20;
                let $_baz = 30 * 30 / 2;
            } else {
                let $_quux = 30 * 30 / 2 * 3;
                10 * 10 / 2;
            }
        }
    } catch (e) {
        term.error(e);
    }
}());"
`;
