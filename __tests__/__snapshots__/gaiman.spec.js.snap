// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`expressions should call methods 1`] = `
"async function main() {
    try {
        await location.replace(\`/__idb__/_gaiman.js\`);
        let $_x = [
            1,
            2,
            3,
            4
        ];
        async function $_square($_x) {
            return $_x * $_x;
        }
        gaiman.echo(await $_x.map($_square));
        await $_foo.bar.baz(\`hello\`);
    } catch (e) {
        gaiman.error(e);
    }
}"
`;

exports[`expressions should chain methods 1`] = `
"async function main() {
    try {
        gaiman.echo(await (await [
            1,
            0,
            2,
            3,
            0,
            4
        ].map($_square)).filter($_identity));
        let $_arr = [
            1,
            2,
            3,
            4,
            5
        ];
        gaiman.echo(await (await (await $_arr.map($_square)).filter($_identity)).join(\`\`));
        gaiman.echo(await (await \`foo\`.split(\`\`)).join(\`:\`));
    } catch (e) {
        gaiman.error(e);
    }
}"
`;

exports[`expressions should parse assign operators 1`] = `
"async function main() {
    try {
        $_i = 2;
        $_i += 2;
        $_i -= 2;
        $_i *= 2;
        $_i /= 2;
        $_i %= 2;
    } catch (e) {
        gaiman.error(e);
    }
}"
`;

exports[`expressions should parse map function 1`] = `
"async function main() {
    try {
        let $_noop = async function lambda($_x) {
        };
        async function $_map($_fn, $_list) {
            let $_result = [];
            for (let $_item of $_list) {
                if (gaiman.should_break_loop(1)) {
                    break;
                }
                await $_result.push($_item);
            }
            gaiman.exit_loop(1);
            return $_result;
        }
        gaiman.echo(await $_map(async function lambda($_x) {
            return $_x * $_x;
        }, [
            1,
            2,
            3,
            4
        ]));
    } catch (e) {
        gaiman.error(e);
    }
}"
`;

exports[`expressions should parse property access 1`] = `
"async function main() {
    try {
        gaiman.echo($_dict[$_i]);
        gaiman.echo(await gaiman.get($_dict[\`hello\`]));
        gaiman.echo(await gaiman.get($_dict[\`hello_\` + 10]));
        $_dict[$_i] = 10;
        $_dict[$_i] = { [\`foo\`]: 10 };
        $_dict[$_i][\`hello\`][\`world\`][$_nice];
    } catch (e) {
        gaiman.error(e);
    }
}"
`;

exports[`expressions should parse property access 2`] = `
"async function main() {
    try {
        $_dict[$_i] = 10;
        $_dict[$_i] = { [\`foo\`]: 10 };
        $_dict[10 + 10] = \`hello \${ $_bar }\`;
    } catch (e) {
        gaiman.error(e);
    }
}"
`;

exports[`expressions should use command as part of expression 1`] = `
"async function main() {
    try {
        await gaiman.echo_extra(await gaiman.get(\`https://jcubic.pl/file.txt\`), 100);
        gaiman.echo(\`<white>\` + await gaiman.ask(\`? \`) + \`</white>\`);
    } catch (e) {
        gaiman.error(e);
    }
}"
`;

exports[`functions should compile function calls 1`] = `
"async function main() {
    try {
        async function $_global($_message) {
            gaiman.echo($_message);
            if ($$__m = String($_message).match(/hello/)) {
                await $_show_hello();
            }
        }
        async function $_show_hello() {
            gaiman.echo(\`hello\`);
        }
        await $_global(\`hello\`);
    } catch (e) {
        gaiman.error(e);
    }
}"
`;

exports[`functions should compile function definitions 1`] = `
"async function main() {
    try {
        async function $_foo($_arg) {
        }
        async function $_foo($_arg) {
            if ($$__m = String($_arg).match(/foo/)) {
                return 10 + 10;
            }
        }
        async function $_login($_username) {
            gaiman.echo(\`what's up?\`);
            if ($$__m = String($_username).match(/root/)) {
                return await gaiman.ask($_username + \`# \`);
            } else {
                return await gaiman.ask($_username + \`$ \`);
            }
        }
    } catch (e) {
        gaiman.error(e);
    }
}"
`;

exports[`functions should create factorial function 1`] = `
"async function main() {
    try {
        async function $_factorial($_n) {
            if ($_n <= 0) {
                return 1;
            } else {
                return $_n * await $_factorial($_n - 1);
            }
        }
    } catch (e) {
        gaiman.error(e);
    }
}"
`;

exports[`global should ignore comments 1`] = `
"async function main() {
    try {
        let $_x = {
            [\`foo\`]: 10,
            [\`bar\`]: 20
        };
        let $_y = [
            1,
            2,
            3,
            4
        ];
        async function $_foo() {
            return 10;
        }
        while (!true) {
            if (gaiman.should_break_loop(1)) {
                break;
            }
            $_x;
        }
        gaiman.exit_loop(1);
        for (let $_i of [
                1,
                2,
                3
            ]) {
            if (gaiman.should_break_loop(2)) {
                break;
            }
            $_x;
        }
        gaiman.exit_loop(2);
    } catch (e) {
        gaiman.error(e);
    }
}"
`;

exports[`global should parse constant values 1`] = `
"async function main() {
    try {
        let $_a = Infinity;
        let $_b = null;
        let $_c = true;
        let $_d = false;
    } catch (e) {
        gaiman.error(e);
    }
}"
`;

exports[`if statements should compile base if 1`] = `
"async function main() {
    try {
        if ($$__m = String($$__m[1]).match(/foo/)) {
            let $_command = await gaiman.ask(\`? \`);
            if ($$__m = String($_commad).match(/bar/)) {
                gaiman.echo($$__m[1]);
            }
        }
    } catch (e) {
        gaiman.error(e);
    }
}"
`;

exports[`if statements should compile if_else 1`] = `
"async function main() {
    try {
        if ($$__m = String($$__m[1]).match(/foo/)) {
            let $_command = await gaiman.ask(\`? \`);
            if ($$__m = String($_commad).match(/(bar)/g)) {
                gaiman.echo($$__m[1]);
            } else if ($$__m = String($_command).match(/(baz)/g)) {
                gaiman.echo($$__m[1]);
            } else {
                gaiman.echo(\`NOP\`);
            }
        } else {
            gaiman.echo(\`NOP\`);
        }
    } catch (e) {
        gaiman.error(e);
    }
}"
`;

exports[`if statements should compile multiple if_else  1`] = `
"async function main() {
    try {
        if ($$__m = String($$__m[1]).match(/foo/)) {
            let $_command = await gaiman.ask(\`? \`);
            if ($$__m = String($_commad).match(/(bar)/g)) {
                gaiman.echo($$__m[1]);
            } else if ($$__m = String($_command).match(/(baz)/g)) {
                gaiman.echo($$__m[1]);
            } else {
                gaiman.echo(\`NOP\`);
            }
        } else {
            gaiman.echo(\`NOP\`);
        }
        let $_command = await gaiman.ask(\`? \`);
        if ($$__m = String($_command).match(/foo/)) {
            gaiman.echo(\`1\`);
        } else if ($$__m = String($_command).match(/bar/)) {
            gaiman.echo(\`2\`);
        } else {
            gaiman.echo(\`3\`);
        }
    } catch (e) {
        gaiman.error(e);
    }
}"
`;

exports[`if statements should compile multiple if_else with expressions 1`] = `
"async function main() {
    try {
        gaiman.echo(\`hello\` + \` world\`);
        let $_command = await gaiman.ask(\`? \`);
        if ($$__m = String($_command).match(/(foo)/)) {
            let $_command = await gaiman.ask(\`? \`);
            let $_foo = 30 * 30 / 2;
            let $_bar = +$_command;
            let $_baz = 10;
            let $_quux = -$_baz;
            10 * 10 + 3;
            if ($$__m = String($_commad).match(/(bar)/)) {
                gaiman.echo($$__m[1] + \`foo\`);
                let $_bar = 10 + 10 * 20;
                let $_baz = 30 * 30 / 2;
            } else {
                let $_quux = 30 * 30 / 2 * 3;
                10 * 10 / 2;
            }
        }
        let $_fn = async function lambda($_sring) {
            let $_cmd = gaiman.parse($_sring);
            if ($_cmd.length === 1) {
                return [
                    \`dir\`,
                    \`cd\`
                ];
            } else {
                let $_last = await $_cmd.pop();
            }
        };
        let $_x = await async function lambda($_x) {
            return $_x;
        }(\`fun fun\`);
    } catch (e) {
        gaiman.error(e);
    }
}"
`;

exports[`loop should parse break 1`] = `
"async function main() {
    try {
        let $_x = 0;
        while (true) {
            if (gaiman.should_break_loop(1)) {
                break;
            }
            $_x = $_x + 1;
            if ($_x > 10) {
                break;
            }
            gaiman.echo($_x);
        }
        gaiman.exit_loop(1);
    } catch (e) {
        gaiman.error(e);
    }
}"
`;

exports[`loop should parse continue 1`] = `
"async function main() {
    try {
        for (let $_i of [
                1,
                2,
                3,
                4,
                5,
                6,
                7
            ]) {
            if (gaiman.should_break_loop(1)) {
                break;
            }
            if ($_i % 2 === 0) {
                continue;
            }
            gaiman.echo($_i);
        }
        gaiman.exit_loop(1);
    } catch (e) {
        gaiman.error(e);
    }
}"
`;

exports[`loop should parse for loops 1`] = `
"async function main() {
    try {
        for (let $_chr of \`hello\`) {
            if (gaiman.should_break_loop(1)) {
                break;
            }
            gaiman.echo($_chr);
        }
        gaiman.exit_loop(1);
        for (let $_chr of location.href) {
            if (gaiman.should_break_loop(2)) {
                break;
            }
            gaiman.echo($_chr);
        }
        gaiman.exit_loop(2);
        for (let [$_key, $_value] of Object.entries($_collect)) {
            if (gaiman.should_break_loop(3)) {
                break;
            }
            gaiman.echo(\`\${ $_key } => \${ $_value }\`);
        }
        gaiman.exit_loop(3);
        for (let $_i of [
                1,
                2,
                3,
                4
            ]) {
            if (gaiman.should_break_loop(4)) {
                break;
            }
        }
        gaiman.exit_loop(4);
        for (let $_i of [
                1,
                2,
                3,
                4
            ]) {
            if (gaiman.should_break_loop(7)) {
                break;
            }
            for (let $_j of [
                    1,
                    2,
                    3,
                    4
                ]) {
                if (gaiman.should_break_loop(6)) {
                    break;
                }
                for (let $_k of [
                        1,
                        2,
                        3,
                        4
                    ]) {
                    if (gaiman.should_break_loop(5)) {
                        break;
                    }
                    gaiman.echo($_i + $_j + $_k);
                }
                gaiman.exit_loop(5);
            }
            gaiman.exit_loop(6);
        }
        gaiman.exit_loop(7);
    } catch (e) {
        gaiman.error(e);
    }
}"
`;

exports[`loop should parse while loops 1`] = `
"async function main() {
    try {
        let $_x = 10;
        while ($_x > 0) {
            if (gaiman.should_break_loop(1)) {
                break;
            }
            gaiman.echo(\`NUM: \${ $_x }\`);
            $_x = $_x - 1;
        }
        gaiman.exit_loop(1);
        while (!true) {
            if (gaiman.should_break_loop(2)) {
                break;
            }
        }
        gaiman.exit_loop(2);
        while (!true) {
            if (gaiman.should_break_loop(4)) {
                break;
            }
            let $_i = 0;
            while ($_i < 10) {
                if (gaiman.should_break_loop(3)) {
                    break;
                }
                $_i += 1;
            }
            gaiman.exit_loop(3);
        }
        gaiman.exit_loop(4);
    } catch (e) {
        gaiman.error(e);
    }
}"
`;

exports[`values should parse arrays 1`] = `
"async function main() {
    try {
        let $_x = [
            1,
            2,
            3,
            4
        ];
        for (let $_word of [
                \`lorem\`,
                \`ipsum\`,
                \`dolor\`
            ]) {
            if (gaiman.should_break_loop(1)) {
                break;
            }
            gaiman.echo($_word);
        }
        gaiman.exit_loop(1);
        for (let $_i of [
                1,
                2,
                3
            ]) {
            if (gaiman.should_break_loop(2)) {
                break;
            }
            gaiman.echo($_i);
        }
        gaiman.exit_loop(2);
        let $_names = [
            \`helo\`,
            \`world\`
        ];
        gaiman.echo($_names[0] + \` \` + $_names[1]);
        gaiman.echo(await [
            1,
            2,
            3,
            4
        ].map(async function lambda($_x) {
            return $_x * $_x;
        }));
    } catch (e) {
        gaiman.error(e);
    }
}"
`;

exports[`values should parse dictionaries 1`] = `
"async function main() {
    try {
        let $_dict = {};
        let $_dict = {
            [\`foo\`]: 10,
            [\`bar\`]: \`hello\`,
            [\`baz\`]: [
                1,
                2,
                3
            ],
            [\`quux\`]: {
                [\`1\`]: 10,
                [\`2\`]: 20,
                [\`3\`]: 30
            }
        };
    } catch (e) {
        gaiman.error(e);
    }
}"
`;

exports[`values should parse strings 1`] = `
"async function main() {
    try {
        gaiman.echo(\`foo bar\`);
        gaiman.echo(\`helo \\"xxx\\"\`);
        gaiman.echo(\`hello \\\\\\\\\`);
        gaiman.echo(\`hello \\\\\\\\\\"hello\\\\\\\\\\" hello\`);
    } catch (e) {
        gaiman.error(e);
    }
}"
`;
