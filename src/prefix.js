/*    ______      _
 *   / ____/___ _(_)___ ___  ____ _____
 *  / / __/ __ `/ / __ `__ \/ __ `/ __ \
 * / /_/ / /_/ / / / / / / / /_/ / / / /
 * \____/\__,_/_/_/ /_/ /_/\__,_/_/ /_/
 *
 * Code generated by Gaiman version {{VER}}
 * https://gaiman.js.org
 */
function parse_cookies(cookies) {
    const result = {};
    cookies.split(/\s*;\s*/).forEach(function(pair) {
        pair = pair.split(/\s*=\s*/);
        var name = decodeURIComponent(pair[0]);
        var value = decodeURIComponent(pair.splice(1).join('='));
        result[name] = value;
    });
    return result;
}

function is_node() {
    return typeof process !== 'undefined' &&
        process.release.name === 'node';
}

const map_supported = 'Map' in this;


function map_dict() {
    return {
        make(init = {}) {
            return new Map(Object.entries(init));
        },
        set(object, ...rest) {
            while (rest.length > 2) {
                const prop = rest.shift();
                if (object instanceof Map) {
                    object = object.get(prop);
                } else {
                    object = object[prop];
                }
            }
            const prop = rest.shift();
            const value = rest.shift();
            if (object instanceof Map) {
                object.set(prop, value);
            } else {
                object[prop] = value;
            }
        },
        get(object, ...rest) {
            while (rest.length) {
                const arg = rest.shift();
                if (object instanceof Map) {
                    object = object.get(arg);
                } else {
                    object = object[arg];
                }
            }
            return object;
        }
    };
}

function simple_dict() {
    return {
        make(init = {}) {
            return init;
        },
        set(object, ...rest) {
            while (rest.length > 2) {
                const prop = rest.shift();
                object = object[prop];
            }
            const prop = rest.shift();
            const value = rest.shift();
            object[prop] = value;
        },
        get(object, ...rest) {
            while (rest.length) {
                const arg = rest.shift();
                object = object[arg];
            }
            return object;
        }
    };
}

function to_string(object) {
    if (object instanceof Array) {
        object = object.map(to_string);
    } else if (typeof object !== 'string') {
        object = String(object);
    }
    return object;
}

const dict = map_supported ? map_dict() : simple_dict();

class WebAdapter {
    constructor() {
        var body = $('body');
        var options = body.css('--options');
        if (typeof options === 'undefined') {
            options = {};
        } else {
            try {
                options = JSON.parse(options);
            } catch(e) {
                console.warn('Gaiman: Invalid --option CSS variable');
                options = {};
            }
        }
        this._term = body.terminal($.noop, $.extend({
            greetings: false,
            exit: false
        }, options));
    }
    store(name, ...args) {
        try {
            if (args.length === 0) {
                return localStorage.getItem(name);
            } else {
                const [ value ] = args;
                localStorage.setItem(name, value);
            }
        } catch(e) {
            // ignore errors that may happen in Incognito mode
        }
    }
    sleep(timeout, visible = false) {
        this._term.pause(visible);
        return new Promise(resolve => {
            setTimeout(() => {
                this._term.resume();
                resolve();
            }, Number(timeout));
        });
    }
    sleep_2(timeout) {
        return this.sleep(timeout, true);
    }
    error(message) {
        this._term.error(message);
    }
    echo(arg) {
        this._term.echo(to_string(arg));
    }
    ask(message) {
        return this._term.read(message);
    }
    ask_2(message, delay) {
        return this._term.read(message, { typing: true, delay });
    }
    echo_2(string, delay) {
        return this._term.echo(string, { typing: true, delay });
    }
    prompt_2(string, delay) {
        return this._term.set_prompt(string, { typing: true, delay });
    }
    input_2(string, delay) {
        return this._term.typing('enter', delay, string);
    }
    parse(input) {
        return $.terminal.parse_arguments(input);
    }
    post(url, data = {}) {
        const form = new FormData();
        Object.entries(data).forEach(([key, value]) => {
            form.append(key, value);
        });
        return fetch(url, {
            method: 'POST',
            body: form
        }).then(res => res.text());
    }
    get(url) {
        return fetch(url).then(res => res.text());
    }
}

var cookie, argv, term, $$__m;
if (is_node()) {
    argv = process.argv;
} else {
    cookie = parse_cookies(document.cookie);
    term = new WebAdapter();
}
