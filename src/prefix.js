/*    ______      _
 *   / ____/___ _(_)___ ___  ____ _____
 *  / / __/ __ `/ / __ `__ \/ __ `/ __ \
 * / /_/ / /_/ / / / / / / / /_/ / / / /
 * \____/\__,_/_/_/ /_/ /_/\__,_/_/ /_/
 *
 * Code generated by Gaiman version {{VER}}
 * https://gaiman.js.org
 */
function parse_cookies(cookies) {
    const result = {};
    cookies.split(/\s*;\s*/).forEach(function(pair) {
        pair = pair.split(/\s*=\s*/);
        var name = decodeURIComponent(pair[0]);
        var value = decodeURIComponent(pair.splice(1).join('='));
        result[name] = value;
    });
    return result;
}

function is_function(obj) {
    return typeof obj === 'function';
}

function is_promise(obj) {
    return obj && is_function(obj.then);
}

function is_node() {
    return typeof process !== 'undefined' &&
        process.release.name === 'node';
}

// based on https://stackoverflow.com/a/46282334/387194
function extend(object, prototype) {
    const descriptors = Object.getOwnPropertyDescriptors(object);
    for (const prop in descriptors) {
        Object.defineProperty(prototype, prop, descriptors[prop]);
    }
}

const loops = {};

const Gaiman = {
    _get_time() {
        return +new Date;
    },
    should_break_loop(id) {
        if (!loops[id]) {
            loops[id] = {
                start: this._get_time(),
                count: 1
            };
            return false;
        } else {
            var now = this._get_time();
            const { start } = loops[id];
            const count = ++loops[id].count;
            if (count > this._config.loop_threshold) {
                const stop = now - start > this._config.loop_timeout;
                if (stop) {
                    window.parent.postMessage({
                        message: 'Infinite Loop detected!',
                        colno: null,
                        lineno: null
                    });
                }
                return stop;
            }
            return false;
        }
    },
    exit_loop(id) {
        delete loops[id];
    },
    parse(input) {
        return $.terminal.parse_arguments(input);
    },
    parse_extra(input) {
        return $.terminal.split_arguments(input);
    },
    post(url, data = {}) {
        return $.post(url, data);
    },
    post_extra(url, data = {}) {
        return $.post(url, data, $.noop, "text");
    },
    get(url) {
        return $.get(url);
    },
    get_extra(url) {
        return $.get(url, $.noop, "text");
    }
};

if (!('Map' in this)) {
    $.getScript('https://cdn.jsdelivr.net/gh/jcubic/static/js/map.min.js').then(() => {
        window.Map = ES6_Map;
    });
}

function to_string(object) {
    if (object instanceof Array) {
        object = object.map(to_string);
    } else if (typeof object !== 'string') {
        if (object) {
            object = JSON.stringify(object, null, 2);
        }
        object = String(object);
    }
    return object;
}

class WebAdapter {
    constructor(config = {}) {
        this._config = $.extend({
            newline: true,
            loop_threshold: 500,
            loop_timeout: 200
        }, config);
        var body = $('body');
        var options = body.css('--options');
        if (typeof options === 'undefined') {
            options = {};
        } else {
            try {
                options = JSON.parse(options);
            } catch(e) {
                console.warn('Gaiman: Invalid --option CSS variable');
                options = {};
            }
        }
        this._term = body.terminal($.noop, $.extend({
            greetings: false,
            exit: false
        }, options));
    }
    config(name, value) {
        if (typeof name === 'string') {
            this._config[name] = value;
        } else {
            $.extend(this._config, name);
        }
    }
    store(name, ...args) {
        try {
            if (args.length === 0) {
                return JSON.parse(localStorage.getItem(name));
            } else {
                const [ value ] = args;
                localStorage.setItem(name, JSON.stringify(value));
            }
        } catch(e) {
            // ignore errors that may happen in Incognito mode
        }
    }
    sleep(timeout, visible = false) {
        this._term.pause(visible);
        return new Promise(resolve => {
            setTimeout(() => {
                this._term.resume();
                resolve();
            }, Number(timeout));
        });
    }
    sleep_extra(timeout) {
        return this.sleep(timeout, true);
    }
    error(e) {
        var message;
        if (e.statusText) {
            message = `Failed to fetch: ${e.url}\n${e.statusText}`;
        } else {
            message = e.message || e;
        }
        this._term.error(message);
    }
    echo(arg) {
        this._term.echo(to_string(arg), { newline: this._config.newline });
    }
    ask(message) {
        return this._term.read(message);
    }
    ask_extra(message, delay) {
        return this._term.read(message, { typing: true, delay });
    }
    echo_extra(string, delay) {
        return this._term.echo(string, { typing: true, delay });
    }
    prompt_extra(string, delay) {
        return this._term.set_prompt(string, { typing: true, delay });
    }
    input_extra(string, delay) {
        return this._term.typing('enter', delay, string);
    }
}

$.ajaxSetup({
    beforeSend: function(jqXHR, settings) {
        jqXHR.url = settings.url;
    }
});

extend(Gaiman, WebAdapter.prototype);

(function(map) {
   Array.prototype.map = function(...args) {
       var result = map.apply(this, args);
       var has_promise = result.some(is_promise);
       if (has_promise) {
           return Promise.all(result);
       } else {
           return result;
       }
   };
})(Array.prototype.map);

(function(filter) {
    function call(fn, arr, ctx) {
        return filter.call(ctx, (_, i) => {
            return arr[i];
        });
    }
    Array.prototype.filter = function(fn, ctx) {
        var items = this.map(fn, ctx);
        if (is_promise(items)) {
            return items.then(arr => {
                return call(fn, arr, this);
            });
        } else {
            return call(fn, items, this);
        }
    };
})(Array.prototype.filter);

(function(reduce) {
    Array.prototype.reduce = function(fn, init) {
        return reduce.call(this, function(acc, ...args) {
            if (is_promise(acc)) {
                return acc.then(acc => {
                    return fn(acc, ...args);
                });
            } else {
                return fn(acc, ...args);
            }
        }, init);
    };
})(Array.prototype.reduce);

var cookie, argv, gaiman, $$__m;
if (is_node()) {
    argv = process.argv;
} else {
    cookie = parse_cookies(document.cookie);
    gaiman = new WebAdapter();
}
